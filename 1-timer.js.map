{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst updateTimer = ms => {\n  const { days, hours, minutes, seconds } = convertMs(ms);\n  daysValue.textContent = addLeadingZero(days);\n  hoursValue.textContent = addLeadingZero(hours);\n  minutesValue.textContent = addLeadingZero(minutes);\n  secondsValue.textContent = addLeadingZero(seconds);\n};\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) {\n    return;\n  }\n\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const timeDifference = userSelectedDate - new Date();\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      updateTimer(0);\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    updateTimer(timeDifference);\n  }, 1000);\n});"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateTimer","timeDifference"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,GAAoB,IAAI,MAC1BI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAU,EAAUX,EAAgBQ,CAAO,EAEjC,MAAMI,EAAiBC,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAEvDC,EAAYC,GAAM,CAMtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEMC,EAAcL,GAAM,CACxB,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUC,CAAE,EACtDb,EAAU,YAAcU,EAAeI,CAAI,EAC3Cb,EAAW,YAAcS,EAAeK,CAAK,EAC7Cb,EAAa,YAAcQ,EAAeM,CAAO,EACjDb,EAAa,YAAcO,EAAeO,CAAO,CACnD,EAEAlB,EAAY,iBAAiB,QAAS,IAAM,CACrCK,IAILL,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BO,EAAgB,YAAY,IAAM,CAChC,MAAMc,EAAiBf,EAAmB,IAAI,KAE9C,GAAIe,GAAkB,EAAG,CACvB,cAAcd,CAAa,EAC3Ba,EAAY,CAAC,EACbpB,EAAe,SAAW,GAC1B,MACD,CAEDoB,EAAYC,CAAc,CAC3B,EAAE,GAAI,EACT,CAAC"}